@echo off

REM Set MySQL connection parameters
set MYSQL_HOST=your_mysql_host
set MYSQL_PORT=your_mysql_port
set MYSQL_USER=your_mysql_username
set MYSQL_PASSWORD=your_mysql_password
set DATABASE_NAME=your_database_name
set TABLE_NAME=your_table_name

REM Set the base backup file name and path
set TIMESTAMP=%DATE:~10,4%_%DATE:~4,2%_%DATE:~7,2%_%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%
set BASE_BACKUP_FILE=%TIMESTAMP%_%TABLE_NAME%

REM Set the maximum file size in bytes (10 MB)
set MAX_FILE_SIZE=10485760

REM Set the number of iterations (adjust as needed)
set ITERATIONS=5

REM Loop through the backup process
for /L %%i in (1, 1, %ITERATIONS%) do (
    set CURRENT_BACKUP_FILE=%BASE_BACKUP_FILE%_%%i.sql
    echo Backing up to file: %CURRENT_BACKUP_FILE%
    
    REM Create the backup using mysqldump with split files
    mysqldump -h %MYSQL_HOST% -P %MYSQL_PORT% -u %MYSQL_USER% -p%MYSQL_PASSWORD% --skip-opt --skip-comments --single-transaction --quick %DATABASE_NAME% %TABLE_NAME% --result-file="%CURRENT_BACKUP_FILE%" --where="1=1 LIMIT 10000000"

    REM Check for errors during mysqldump
    if %ERRORLEVEL% neq 0 (
        echo Error: Failed to create backup. Error Code: %ERRORLEVEL%
    ) else (
        echo Backup completed successfully.
        echo %TIMESTAMP% - Backup completed successfully. >> backup_log.txt
    )
)

pause


-------------------------------------------------------------
@echo off

set "CONFIG_FILE=config.txt"
if not exist "%CONFIG_FILE%" (
    echo Error: Configuration file not found.
    pause
    exit /b 1
)

call :readConfig

set BACKUP_DIR=%CONFIG_BACKUP_DIR%
set CURRENT_DATE=%date:~10,4%%date:~4,2%%date:~7,2%
set BACKUP_FILE=%BACKUP_DIR%\backup_%CURRENT_DATE%.sql
set LOG_FILE=%BACKUP_DIR%\backup_log.txt

echo Backup script started at %time% on %date% >> %LOG_FILE%

echo Checking database connection...
mysql -u%MYSQL_USER% -p%MYSQL_PASSWORD% -h%MYSQL_HOST% -e "SELECT 1" > nul 2>> %LOG_FILE%
if %errorlevel% neq 0 (
    echo Error: Unable to connect to the database. Check your MySQL credentials and server availability.
    echo Script completed with errors at %time% on %date% >> %LOG_FILE%
    pause
    exit /b 1
) else (
    echo Database connection successful.
)

echo Running command: mysqldump -u%MYSQL_USER% -p******** -h%MYSQL_HOST% --databases %MYSQL_DATABASE% > %BACKUP_FILE% 2>> %LOG_FILE%
mysqldump -u%MYSQL_USER% -p%MYSQL_PASSWORD% -h%MYSQL_HOST% --databases %MYSQL_DATABASE% > %BACKUP_FILE% 2>> %LOG_FILE%
set "EXIT_CODE=%errorlevel%"

if %EXIT_CODE% equ 0 (
    echo MySQL backup completed successfully.
) else (
    echo Error: MySQL backup failed with exit code %EXIT_CODE%.
    echo Script completed with errors at %time% on %date% >> %LOG_FILE%
    pause
    exit /b 1
)

echo Backup script completed at %time% on %date% >> %LOG_FILE%
pause
exit /b 0

:readConfig
for /f "tokens=1,* delims==" %%A in (%CONFIG_FILE%) do (
    set "%%A=%%B"
)
exit /b 0




@echo off

REM Run your command here
your_command_here

REM Check the errorlevel
if %errorlevel% equ 0 (
    echo Command executed successfully.
) else (
    echo Error: Command failed with exit code %errorlevel%.
)

pause


@echo off

set "SQL_FILE=path\to\your\file.sql"

for %%I in ("%SQL_FILE%") do set "FILE_SIZE=%%~zI"

echo Size of %SQL_FILE% is %FILE_SIZE% bytes.

pause

#!/bin/bash

MYSQL_USER="your_username"
MYSQL_PASSWORD="your_password"
MYSQL_DATABASE="your_database"
OUTPUT_DIR="/path/to/backup/directory"

# Set the maximum size for each backup file (20MB in this example)
MAX_FILE_SIZE_MB=20
MAX_FILE_SIZE=$((MAX_FILE_SIZE_MB * 1024 * 1024))

# Set the filename prefix
FILENAME_PREFIX="backup"

# Set the date format for the backup files
DATE_FORMAT=$(date +"%Y%m%d%H%M%S")

# Generate the output file name
OUTPUT_FILE="$OUTPUT_DIR/$FILENAME_PREFIX"_"$DATE_FORMAT.sql.gz"

# Perform the MySQL backup
mysqldump -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE | gzip > $OUTPUT_FILE

# Split the backup into multiple files if it exceeds the maximum size
split --line-bytes=$MAX_FILE_SIZE $OUTPUT_FILE "$OUTPUT_DIR/$FILENAME_PREFIX"_"$DATE_FORMAT"_

# Remove the original backup file
rm $OUTPUT_FILE

echo "Backup completed successfully."

-------------------------------------------------------------------------------------------
@echo off
setlocal enabledelayedexpansion

set "SOURCE_FOLDER=path\to\your\folder"
set "OUTPUT_FOLDER=path\to\output\folder"
set "MAX_FILE_SIZE_MB=10"
set "MAX_FILE_SIZE_BYTES=10485760"  REM 10MB in bytes

if not exist "%SOURCE_FOLDER%" (
    echo Error: Source folder not found.
    exit /b 1
)

if not exist "%OUTPUT_FOLDER%" (
    mkdir "%OUTPUT_FOLDER%"
)

for %%F in ("%SOURCE_FOLDER%\*.sql") do (
    set "FILE_SIZE=0"
    set "FILE=%OUTPUT_FOLDER%\%%~nF_part_1.sql"
    type nul > "!FILE!"

    for /f %%A in ('dir /-C /b "%%F"') do set "FILE_SIZE=%%~zA"
    set /a "FILES=1"

    for /f "tokens=* delims=" %%A in ('type "%%F" ^| find /v /c ""') do set "LINE_COUNT=%%A"

    for /f "tokens=* delims=" %%A in ('type "%%F"') do (
        set /a "FILE_SIZE+=1"
        set /a "PERCENT=FILE_SIZE*100/LINE_COUNT"
        if !PERCENT! geq 10 (
            set /a "PERCENT=0"
            set /a "FILES+=1"
            set "FILE=%OUTPUT_FOLDER%\%%~nF_part_!FILES!.sql"
            type nul > "!FILE!"
        )
        echo !PERCENT!%%^>!FILE!
        echo %%A>> "!FILE!"
    )
)

echo Splitting files completed.
pause
exit /b 0
------------------------------------------------------------------------------------------

@echo off

set "SQL_FILE=path\to\your\file.sql"
set "LINE_COUNT=0"

for /f %%A in ('type "%SQL_FILE%" ^| find /v /c ""') do set "LINE_COUNT=%%A"

echo The number of lines in %SQL_FILE% is %LINE_COUNT%.

pause
 
------------------------------------------------------------------
